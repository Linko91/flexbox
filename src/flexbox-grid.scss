//-- Flexbox grid

$flexbox-grids: 10 !default;
$flexbox-breakpoints: (xs: 600px, sm: 840px, md: 960px, lg: 1280px, xl: 1440px) !default;

.flex {
  $grids: ();
  $columns: ();
  $grid: 2;

  @mixin media-xs { @media (max-width: map_get($flexbox-breakpoints, xs)) { @content; } }
  @mixin media-sm { @media (max-width: map_get($flexbox-breakpoints, sm)) { @content; } }
  @mixin media-md { @media (max-width: map_get($flexbox-breakpoints, md)) { @content; } }
  @mixin media-lg { @media (max-width: map_get($flexbox-breakpoints, lg)) { @content; } }
  @mixin media-xl { @media (max-width: map_get($flexbox-breakpoints, xl)) { @content; } }

  @function str-replace($string, $search, $replace: '') {
    $string: inspect($string);
    $index: str-index($string, $search);
    @if $index {
      @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
  }

  @while $grid <= $flexbox-grids {
    $col: 2;
    $grid-size: 1 / $grid * 100%;
    $grid-selector: selector_append(&, ".grid#{$grid}");
    $grids: map_merge($grids, ($grid: ($grid-selector $grid-size)));

    @while $col <= $grid {
      $size: #{$col / $grid * 100 + '%'};
      $col-selector: unquote("#{$grid-selector} > .col#{$col}");

      @if (map_has_key($columns, $size)) {
        $columns: map_merge($columns, ($size: append(map_get($columns, $size), $col-selector, 'comma')));
      } @else {
        $columns: map_merge($columns, ($size: $col-selector));
      }
      $col: $col + 1;
    }
    $grid: $grid + 1;
  }

  // generate grids
  @each $grid, $grid-params in $grids {
    $selector: nth($grid-params, 1);
    $size: nth($grid-params, 2);
    $flex-basis-offset: ($grid - 1) / $grid * $flexbox-gap-size;

    @at-root #{$selector} {
      > * {
        flex: 0 0 $size;
      }
      &.gaps {
        > {
          * {
            flex-basis: calc(#{$size} - #{$flex-basis-offset});
          }
          :not(:first-of-type) {
            margin-left: $flexbox-gap-size / 2;
          }
          :not(:last-of-type) {
            margin-right: $flexbox-gap-size / 2;
          }
          :nth-child(#{$grid}n) {
            margin-right: 0;
          }
          :nth-child(#{$grid}n+1) {
            margin-left: 0;
          }
        }
        // add horizontal gaps in multi-line flex-container
        &:not(.column) > {
          :nth-child(n+#{$grid+1}) {
            margin-top: $flexbox-gap-size;
          }
        }
        // add vertical gaps in multi-line flex-container
        &.column > {
          :nth-child(n+#{$grid+1}) {
            margin-left: $flexbox-gap-size;
          }
        }
      }
    }
  }

  // generate columns
  @each $size, $selector in $columns {
    @at-root #{$selector} {
      flex-basis: $size;
    }
  }

  // generate media breakpoints
  @include media-xl {
    @each $size, $selector in $columns {
      $selector: str-replace($selector, ".col", ".xl");
      @at-root #{$selector} { flex-basis: $size; }
    }
  }

  @include media-lg {
    @each $size, $selector in $columns {
      $selector: str-replace($selector, ".col", ".lg");
      @at-root #{$selector} { flex-basis: $size; }
    }
  }

  @include media-md {
    @each $size, $selector in $columns {
      $selector: str-replace($selector, ".col", ".md");
      @at-root #{$selector} { flex-basis: $size; }
    }
  }

  @include media-sm {
    @each $size, $selector in $columns {
      $selector: str-replace($selector, ".col", ".sm");
      @at-root #{$selector} { flex-basis: $size; }
    }
  }

  @include media-xs {
    @each $size, $selector in $columns {
      $selector: str-replace($selector, ".col", ".xs");
      @at-root #{$selector} { flex-basis: $size; }
    }
  }
}
