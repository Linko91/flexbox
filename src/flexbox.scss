//-- Flexbox

$flexbox-grids-count: 12 !default;
$flexbox-breakpoints: (xl: 1440px, lg: 1280px, md: 960px, sm: 840px, xs: 600px) !default;
$flexbox-gap-default: 1em !default;
$flexbox-grid-selector: unquote("grid-") !default;
$flexbox-col-selector: unquote("col-") !default;

.flex {
  display: flex;

  &.inline {
    display: inline-flex;
  }

  &.fullsize {
    width: 100%;
    height: 100%;
    &-viewport {
      width: 100vw;
      height: 100vh;
    }
  }

  &.column {
    flex-direction: column;
    &.reverse {
      flex-direction: column-reverse;
    }
  }

  &.reverse {
    flex-direction: row-reverse;
  }

  &.wrap {
    flex-wrap: wrap;
    &-reverse {
      flex-wrap: wrap-reverse;
    }
  }

  &.auto {
    > * {
      flex: 1 0 0;
    }
  }

  &.center {
    > * {
      margin: auto;
    }
  }

  $flex: flex-start flex-end center;
  $space: space-around space-between;
  $stretch: stretch;
  $justifyContent: join($flex, space-around space-between);
  $alignContent: join($justifyContent, $stretch);
  $alignItems: join($flex, $stretch baseline);

  // align items in x-axis for flex=row (default) and in y-axis when flex=column mode
  @each $mod in $justifyContent {
    &.justify-#{$mod} {
      justify-content: $mod;
    }
  }

  // opposite to .justify-*, but has a bit different values
  @each $mod in $alignItems {
    &.align-#{$mod} {
      align-items: $mod;
    }
  }
  @each $mod in $alignContent {
    &.content-#{$mod} {
      align-content: $mod;
    }
  }

  // gaps
  &.gaps {
    --flex-gap: $flexbox-gap-default;
    &:not(.column) {
      > :not(:last-child) {
        margin-right: var(--flex-gap);
      }
    }
    &.column {
      > :not(:last-child) {
        margin-bottom: var(--flex-gap);
      }
    }
    &[class*="#{$flexbox-grid-selector}"] {
      > .gaps-wrapper {
        flex-wrap: wrap;
        flex: 1 0;
        display: flex;
        margin: calc(var(--flex-gap) / -2);
        > * {
          margin: calc(var(--flex-gap) / 2);
        }
        > .auto {
          flex-grow: 1;
        }
      }
    }
  }
  &.no-gaps {
    --flex-gap: 0px;
  }

  // children
  > .box {
    &.first {
      order: -1;
    }
    &.last {
      order: 1;
    }
    &.grow {
      flex-grow: 1;
    }
    &.nogrow {
      flex-grow: 0;
    }
    &.noshrink {
      flex-shrink: 0;
    }
    &.center {
      margin: auto;
    }
    &.left {
      margin-left: 0;
      margin-right: auto;
    }
    &.right {
      margin-right: 0;
      margin-left: auto;
    }
    &.top {
      margin-top: 0;
      margin-bottom: auto;
    }
    &.bottom {
      margin-bottom: 0;
      margin-top: auto;
    }

    @each $mod in $alignItems {
      &.self-#{$mod} {
        align-self: $mod;
      }
    }
  }

  // fix for proper .box.grow-ing in firefox and safari
  &.column {
    > .box.grow {
      height: 0;
    }
  }
  &:not(.column) {
    > .box.grow {
      width: 0;
    }
  }

  @if ($flexbox-grids-count > 0) {
    // generate grids & columns for browsers with css-variables support
    $grid: 1;
    @while $grid <= $flexbox-grids-count {
      &.#{$flexbox-grid-selector}#{$grid} {
        --flex-grid: $grid;
      }
      .#{$flexbox-col-selector}#{$grid} {
        --flex-col: $grid;
      }
      $grid: $grid + 1;
    }

    &[class*="#{$flexbox-grid-selector}"] {
      flex-wrap: wrap;
      [class*="#{$flexbox-col-selector}"] {
        flex: 0 1 calc(100% / var(--flex-grid) * var(--flex-col) - var(--flex-gap, 0px));
        &.hidden {
          display: none;
        }
      }
    }

    // generate media breakpoints
    @each $prefix, $breakpoint in $flexbox-breakpoints {
      @media #{"(max-width: #{$breakpoint})"} {
        $grid: 1;
        @while $grid <= $flexbox-grids-count {
          &.#{$prefix}#{$grid} {
            --flex-grid: $grid;
          }
          .#{$prefix}#{$grid} {
            --flex-col: $grid;
          }
          $grid: $grid + 1;
        }
        &[class*="#{$flexbox-grid-selector}"] {
          .#{$prefix}-hidden {
            display: none !important;
          }
          .#{$prefix}-visible {
            display: block !important;
            &.flex {
              display: flex !important;
              &.inline {
                display: inline-flex !important;
              }
            }
          }
        }
      }
    }
  }

}