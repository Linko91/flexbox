//-- Flexbox

$flexbox-grids: 12 !default;
$flexbox-gap-size: 1rem !default;

.flex {
  display: flex;

  &.inline {
    display: inline-flex;
  }

  &.fullsize {
    min-width: 100vw;
    min-height: 100vh;
    &-fixed {
      width: 100vw;
      height: 100vh;
    }
  }

  &.column {
    flex-direction: column;
    &.reverse {
      flex-direction: column-reverse;
    }
  }

  &.reverse {
    flex-direction: row-reverse;
  }

  &.wrap {
    flex-wrap: wrap;
    &-reverse {
      flex-wrap: wrap-reverse;
    }
  }

  &.auto {
    > * {
      flex: 1 0 auto;
    }
  }

  &.center {
    > * {
      margin: auto;
    }
  }

  $flex: flex-start flex-end center;
  $space: space-around space-between;
  $stretch: stretch;
  $justifyContent: join($flex, space-around space-between);
  $alignContent: join($justifyContent, $stretch);
  $alignItems: join($flex, $stretch baseline);
  $margins: top right bottom left;

  // align items in x-axis for flex=row (default) and in y-axis when flex=column mode
  @each $mod in $justifyContent {
    &.justify-#{$mod} {
      justify-content: $mod;
    }
  }

  // opposite to .justify-*, but has a bit different values
  @each $mod in $alignItems {
    &.align-#{$mod} {
      align-items: $mod;
    }
  }
  @each $mod in $alignContent {
    &.content-#{$mod} {
      align-content: $mod;
    }
  }

  // grid pre-calculations
  $grids: ();
  $columns: ();
  $grid: 2;

  @while $grid <= $flexbox-grids {
    $col: 2;
    $grid-size: 1 / $grid * 100%;
    $grid-selector: selector_append(&, ".grid#{$grid}");
    $grids: map_merge($grids, ($grid: ($grid-selector $grid-size)));

    @while $col <= $grid {
      $size: #{$col / $grid * 100 + '%'};
      $col-selector: unquote("#{$grid-selector} > .col#{$col}");

      @if(map_has_key($columns, $size)) {
        $columns: map_merge($columns, ($size: append(map_get($columns, $size), $col-selector, 'comma')));
      } @else  {
        $columns: map_merge($columns, ($size: $col-selector));
      }
      $col: $col + 1;
    }
    $grid: $grid + 1;
  }

  &.gaps {
    &:not(.column) {
      > :not(:last-of-type) {
        margin-right: $flexbox-gap-size;
      }
    }
    &.column {
      > :not(:last-of-type) {
        margin-bottom: $flexbox-gap-size;
      }
    }
    &-unordered-cols {
      padding-left: $flexbox-gap-size;
      padding-top: $flexbox-gap-size;
      > .box {
        padding-right: $flexbox-gap-size;
        padding-bottom: $flexbox-gap-size;
        > :first-child, &:after, &:before {
          display: block;
          width: 100%;
          height: 100%;
        }
      }
    }
  }

  // generate grids
  @each $grid, $grid-params in $grids {
    $selector: nth($grid-params, 1);
    $size: nth($grid-params, 2);
    $flex-basis-offset: ($grid - 1) / $grid * $flexbox-gap-size;

    @at-root #{$selector} {
      > * {
        flex-basis: $size;
      }
      &.gaps {
        > {
          * {
            flex-basis: calc(#{$size} - #{$flex-basis-offset});
          }
          :not(:first-of-type) {
            margin-left: $flexbox-gap-size / 2;
          }
          :not(:last-of-type) {
            margin-right: $flexbox-gap-size / 2;
          }
        }
        &.wrap {
          > {
            :nth-child(#{$grid}n) {
              margin-right: 0;
            }
            :nth-child(#{$grid}n+1) {
              margin-left: 0;
            }
          }
          // add horizontal gaps in multi-line flex-container
          &:not(.column) > {
            :nth-child(n+#{$grid+1}) {
              margin-top: $flexbox-gap-size;
            }
          }
          // add vertical gaps in multi-line flex-container
          &.column > {
            :nth-child(n+#{$grid+1}) {
              margin-left: $flexbox-gap-size;
            }
          }
        }
      }
    }
  }

  // generate columns
  @each $size, $selector in $columns {
    @at-root #{$selector} {
      flex-basis: $size;
    }
  }

  // children
  > .box {
    &.first {
      order: -1;
    }
    &.last {
      order: 1;
    }
    &.grow {
      flex-grow: 1;
    }
    &.noshrink {
      flex-shrink: 0;
    }
    &.auto {
      margin: auto;
    }

    @each $margin in $margins {
      &[class*="auto-"][class*="-#{$margin}"] {
        margin-#{$margin}: auto;
      }
      &.#{$margin} {
        margin-#{$margin}: 0;
      }
    }

    @each $mod in $alignItems {
      &.#{$mod} {
        align-self: $mod;
      }
    }
  }
}
