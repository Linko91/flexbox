//-- Flexbox

$flexbox-grids-count: 12 !default;
$flexbox-gap-default: 1em !default;
$flexbox-grid-selector: unquote("grid-") !default;
$flexbox-col-selector: unquote("col-") !default;

.flex {
  display: flex;

  &.inline {
    display: inline-flex;
  }

  &.fullsize {
    width: 100%;
    height: 100%;
    &-viewport {
      width: 100vw;
      height: 100vh;
    }
  }

  &.column {
    flex-direction: column;
    &.reverse {
      flex-direction: column-reverse;
    }
  }

  &.reverse {
    flex-direction: row-reverse;
  }

  &.wrap {
    flex-wrap: wrap;
    &-reverse {
      flex-wrap: wrap-reverse;
    }
  }

  &.auto {
    > * {
      flex: 1 0 0;
    }
  }

  &.center {
    > * {
      margin: auto;
    }
  }

  $flex: flex-start flex-end center;
  $space: space-around space-between;
  $stretch: stretch;
  $justifyContent: join($flex, space-around space-between);
  $alignContent: join($justifyContent, $stretch);
  $alignItems: join($flex, $stretch baseline);

  // align items in x-axis for flex=row (default) and in y-axis when flex=column mode
  @each $mod in $justifyContent {
    &.justify-#{$mod} {
      justify-content: $mod;
    }
  }

  // opposite to .justify-*, but has a bit different values
  @each $mod in $alignItems {
    &.align-#{$mod} {
      align-items: $mod;
    }
  }
  @each $mod in $alignContent {
    &.content-#{$mod} {
      align-content: $mod;
    }
  }

  // gaps
  &.gaps {
    &:not(.wrap):not([class*="#{$flexbox-grid-selector}"]) {
      $gap: var(--flex-gap, #{$flexbox-gap-default});
      &.column {
        > :not(:last-child) {
          margin-bottom: $gap;
        }
      }
      &:not(.column) {
        > :not(:last-child) {
          margin-right: $gap;
        }
      }
    }
    // grids and multi-line flex-containers
    &.wrap, &[class*="#{$flexbox-grid-selector}"] {
      $gap: calc(var(--flex-gap, #{$flexbox-gap-default}) / 2);
      margin: calc(var(--flex-gap, #{$flexbox-gap-default}) / -2);
      > * {
        margin: $gap;
      }
    }
    // reset margin for nested grids
    &[class*="#{$flexbox-grid-selector}"][class*="#{$flexbox-col-selector}"] {
      margin: 0;
    }
  }

  // children
  > .box {
    &.first {
      order: -1;
    }
    &.last {
      order: 1;
    }
    &.grow {
      // important note (flex bug or feature):
      // flex-basis: 0% allows to extend container if contents more then its used size, 0 - not.
      flex: 1 0 0%;
      &-fixed {
        flex: 1 0 0;
      }
    }
    &.nogrow {
      flex-grow: 0;
    }
    &.noshrink {
      flex-shrink: 0;
    }
    &.center {
      margin: auto;
    }
    &.left {
      margin-left: 0;
      margin-right: auto;
    }
    &.right {
      margin-right: 0;
      margin-left: auto;
    }
    &.top {
      margin-top: 0;
      margin-bottom: auto;
    }
    &.bottom {
      margin-bottom: 0;
      margin-top: auto;
    }

    @each $mod in $alignItems {
      &.self-#{$mod} {
        align-self: $mod;
      }
    }
  }

  // generate grids & columns for browsers with css-variables support
  $grid: 1;
  $grids: ();
  $cols: ();
  $cols-gaps: ();
  @while $grid <= $flexbox-grids-count {
    &.#{$flexbox-grid-selector}#{$grid} > * {
      --flex-grid: $grid;
    }
    .#{$flexbox-col-selector}#{$grid} {
      --flex-col: $grid;
    }
    $grids: append($grids, #{& +"."+ $flexbox-grid-selector + $grid}, "comma");
    $cols: append($cols, #{& +" > ."+ $flexbox-col-selector + $grid}, "comma");
    $cols-gaps: append($cols-gaps, #{& +".gaps > ."+ $flexbox-col-selector + $grid + ":not([class*='"+ $flexbox-grid-selector +"'])"}, "comma");
    $grid: $grid + 1;
  }

  @at-root {
    #{$grids} {
      flex-wrap: wrap;
      &.cols-grow {
        --flex-col-grow: 1;
      }
      &.cols-nogrow {
        --flex-col-grow: 0;
      }
    }

    #{$cols-gaps} {
      flex: var(--flex-col-grow, 1) 0 calc(100% / var(--flex-grid) * var(--flex-col) - var(--flex-gap, #{$flexbox-gap-default}));
    }

    #{$cols} {
      flex: var(--flex-col-grow, 1) 0 calc(100% / var(--flex-grid) * var(--flex-col));
    }
  }
}