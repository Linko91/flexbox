//-- Flexbox

$flexbox-grids-count: 12 !default;

.flex {
  --flex-gap: 1em;
  display: flex;

  &.inline {
    display: inline-flex;
  }

  &.fullsize {
    min-width: 100%;
    min-height: 100%;
    &-fixed {
      width: 100%;
      height: 100%;
    }
  }

  &.column {
    flex-direction: column;
    &.reverse {
      flex-direction: column-reverse;
    }
  }

  &.reverse {
    flex-direction: row-reverse;
  }

  &.wrap {
    flex-wrap: wrap;
    &-reverse {
      flex-wrap: wrap-reverse;
    }
  }

  &.auto {
    > * {
      flex: 1 0 auto;
    }
  }

  &.center {
    > * {
      margin: auto;
    }
  }

  $flex: flex-start flex-end center;
  $space: space-around space-between;
  $stretch: stretch;
  $justifyContent: join($flex, space-around space-between);
  $alignContent: join($justifyContent, $stretch);
  $alignItems: join($flex, $stretch baseline);
  $margins: top right bottom left;

  // align items in x-axis for flex=row (default) and in y-axis when flex=column mode
  @each $mod in $justifyContent {
    &.justify-#{$mod} {
      justify-content: $mod;
    }
  }

  // opposite to .justify-*, but has a bit different values
  @each $mod in $alignItems {
    &.align-#{$mod} {
      align-items: $mod;
    }
  }
  @each $mod in $alignContent {
    &.content-#{$mod} {
      align-content: $mod;
    }
  }

  &.gaps {
    &:not(.column) {
      > :not(:last-of-type) {
        margin-right: var(--flex-gap);
      }
    }
    &.column {
      > :not(:last-of-type) {
        margin-bottom: var(--flex-gap);
      }
    }
  }

  // children
  > .box {
    &.first {
      order: -1;
    }
    &.last {
      order: 1;
    }
    &.grow {
      flex-grow: 1;
    }
    &.noshrink {
      flex-shrink: 0;
    }
    &.auto {
      margin: auto;
    }

    @each $margin in $margins {
      &[class*="auto-"][class*="-#{$margin}"] {
        margin-#{$margin}: auto;
      }
      &.#{$margin} {
        margin-#{$margin}: 0;
      }
    }

    @each $mod in $alignItems {
      &.#{$mod} {
        align-self: $mod;
      }
    }
  }

  // generate grids
  $grid: 1;
  @while $grid <= $flexbox-grids-count {
    &.grid#{$grid} {
      --flex-grid: $grid;
      $grid: $grid + 1;
    }
  }
  > .cols {
    display: flex;
    flex-wrap: wrap;
    flex-grow: 1;
    > * {
      flex-basis: calc(100% / var(--flex-grid));
      $col: 1;
      @while $col <= $flexbox-grids-count {
        &.col#{$col} {
          flex-basis: calc(100% / var(--flex-grid) * #{$col});
        }
        $col: $col + 1;
      }
    }
  }
  &.gaps > .cols {
    --flex-gaps-size-half: calc(var(--flex-gap) / 2);
    --flex-gaps-size-half-neg: calc(var(--flex-gap) / -2);
    margin: var(--flex-gaps-size-half-neg);
    > * {
      background-clip: padding-box;
      border: var(--flex-gaps-size-half) solid transparent;
    }
  }
}